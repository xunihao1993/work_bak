"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q1#cxvo#ef=ne0*eb$$go@#s3$m#z(w0)i=&xiwizb+sjytbja'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # 投产时得关掉

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'simpleui',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myApp',
    'djcelery',  # celery
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# # 指定服务器mysql数据库
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'celery_django2',
#         'USER': 'root',
#         'PASSWORD': 'haohao',
#         'HOST': '192.168.45.90',
#         'POST': '3306',
#     }
# }

# 指定本地mysql数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'POST': '3306',
    }
}

# 配置缓存
CACHES = {
    'default': {
        'BACKEND': 'redis_cache.cache.RedisCache',
        'LOCATION': "redis://:haohao@192.168.45.90:6379/0",
        'TIMEOUT': 60,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# 配置celery
import djcelery

djcelery.setup_loader()
# 指定redis数据库
# CELERY_BROKER_URL = 'redis://:haohao@192.168.45.90:6379/0'
BROKER_URL = 'redis://:haohao@192.168.45.90:6379/1'
# BROKER_URL = 'redis://127.0.0.1:6379/1'  # 无密码配置
CELERY_RESULT_BACKEND = 'redis://:haohao@192.168.45.90:6379/1'
# CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'  # 无密码配置
# CELERY_RESULT_BACKEND = 'django-db'
CELERY_RESULT_SERIALIZER = 'json'

# celery时区设置，使用settings中TIME_ZONE同样的时区
CELERY_TIMEZONE = TIME_ZONE
# 指定任务文件
CELERY_IMPORES = ("myApp.task")  # app.task**********
# celery beat配置
DJANGO_CELERY_BEAT_TZ_AWARE = False
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'

from celery.schedules import crontab

CELERYBEAT_SCHEDULE = {
    u'测试11111': {
        "task": "myApp.task.longIO",  # ******** app.task
        "schedule": crontab(),
        "args": (['1', '2'], ['3', '4'])  # 传参，可以以文件的形式动态读取
    },
}
STATIC_ROOT = os.path.join(BASE_DIR, "/static/")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
import time

'''
simpleui自定义菜单
'''

# logging 配置
# 日志处理
BASE_LOG_DIR = os.path.join(BASE_DIR, "logs")
if not os.path.exists(BASE_LOG_DIR):
    os.makedirs(BASE_LOG_DIR)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 日志输出格式的定义
    'formatters': {
        'verbose': {
            'format': '%(levelname)s [%(asctime)s] [%(pathname)s %(funcName)s %(lineno)s] %(message)s'
        },
    },
    # 处理器：需要处理什么级别的日志及如何处理
    'handlers': {
        # 将日志打印到终端
        'console': {
            'level': 'INFO',  # 日志级别
            'class': 'logging.StreamHandler',  # 使用什么类去处理日志流
            'formatter': 'verbose'  # 指定上面定义过的一种日志输出格式
        },
        # 默认日志处理器
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "commissionApp.log"),  # 日志文件路径
            'maxBytes': 1024 * 1024 * 10,  # 日志大小 10M
            'backupCount': 5,  # 日志文件备份的数量
            'formatter': 'verbose',  # 日志输出格式
            'encoding': 'utf-8',
        },
        # 日志处理级别warn
        'warn': {
            'level': 'WARN',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "warn.log"),  # 日志文件路径
            'maxBytes': 1024 * 1024 * 100,  # 日志大小 100M
            'backupCount': 5,  # 日志文件备份的数量
            'formatter': 'verbose',  # 日志格式
            'encoding': 'utf-8',
        },
        # 日志级别error
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
            'filename': os.path.join(BASE_LOG_DIR, "error.log"),  # 日志文件路径
            'maxBytes': 1024 * 1024 * 100,  # 日志大小 100M
            'backupCount': 5,
            'formatter': 'verbose',  # 日志格式
            'encoding': 'utf-8',
        },
    },

    'loggers': {
        # 默认的logger应用如下配置
        '': {
            'handlers': ['default', 'warn', 'error', 'console'],
            'level': 'INFO',
            'propagate': True,  # 如果有父级的logger示例，表示不要向上传递日志流
        },
    },
}
'''
simpleui
'''
import time

# from commissionApp.toolkit.general_tools import get_ip
#
# flowerUrl = 'http://%s:9008/' % get_ip()
# SIMPLEUI_ICON = {
# 	'系统管理': 'fab fa-apple',
# 	'员工管理': 'fas fa-user-tie'
# }
SIMPLEUI_HOME_INFO = False
SIMPLEUI_CONFIG = {
    'system_keep': False,
    # 'menu_display': ['综合信息管理', '定时异步任务管理', '权限认证', ],  # 开启排序和过滤功能, 不填此字段为默认排序和全部显示, 空列表[] 为全部不显示.
    'dynamic': True,  # 设置是否开启动态菜单, 默认为False. 如果开启, 则会在每次用户登陆时动态展示菜单内容
    'menus': [{
        'app': 'myApp',
        'name': '综合信息管理',
        'icon': 'fas fa-code',
        'models': [{
            'name': '定时下载配置信息表',
            'icon': 'fas fa-code',
            'url': 'myApp/logdowninfo/',

        }, {
            'name': '设备信息表',
            'icon': 'fas fa-code',
            'url': 'myApp/deviceinfo/',

        }, ]
    }, {
        'app': 'djcelery',
        'name': '定时异步任务管理',
        'icon': 'fa fa-file',
        'models': [{
            'name': '定时任务时间格式',
            'url': 'djcelery/crontabschedule/',
            'icon': 'far fa-surprise'
        }, {
            'name': '定时任务',
            'url': 'djcelery/periodictask/',
            'icon': 'fab fa-github'
        },
            {
                'name': '任务结果查询',
                # 'url': flowerUrl,
                'icon': 'fab fa-github'
            }
        ]
    }, {
        'app': 'auth',
        'name': '权限认证',
        'icon': 'fas fa-user-shield',
        'models': [{
            'name': '用户',
            'icon': 'fa fa-user',
            'url': 'auth/user/'
        }, {
            'name': '组',
            'icon': 'fa fa-user',
            'url': 'auth/group/'
        }]
    }]
}
